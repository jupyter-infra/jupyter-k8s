# [AWS TRAEFIK DEX]: Configuration for aws-traefik-dex deployment mode

# Default namespace for Traefik Middlewares and other resources
# This should be left as the default for normal operation
namespace: jupyter-k8s-router

# Full domain for the application (required)
domain: ""


# [STORAGE] StorageClasses for Workspaces
storageClass:
  ebs:
    create: true
    name: ebs-sc
    isDefault: false
    provisioner: ebs.csi.aws.com
    reclaimPolicy: Delete
    volumeBindingMode: WaitForFirstConsumer
    parameters:
      type: gp3
      fsType: ext4
  efs:
    create: false
    name: efs-sc
    provisioner: efs.csi.aws.com
    reclaimPolicy: Delete
    volumeBindingMode: WaitForFirstConsumer
    parameters:
      provisioningMode: efs-ap
      fileSystemId: ""
      directoryPerms: "700"
      basePath: "/shared-data"
      uid: "65532"
      gid: "65532"

# [CERT-MANAGER]: Configuration for cert-manager
certManager:
  # Email address for Let's Encrypt notifications
  email: ""
  # Whether to use staging or production Let's Encrypt server
  useStaging: false

# [TRAEFIK]: Configuration for Traefik
traefik:
  # Always enabled for this chart
  enabled: true
  # Traefik deployment image repository
  repository: docker.io
  # Traefik deployment image name
  imageName: traefik
  # Traefik deployment image tag
  imageTag: latest
  # Number of traefik replicas
  replicas: 1
  # Redirect HTTP to HTTPS
  redirectHttp: true
  # Whether to configure traefik at 'debug' log level ('info' if omitted)
  debug: true
  # Allow cross-namespace middleware references
  allowCrossNamespace: true

# Dex configuration
dex:
  # Number of traefik replicas
  replicas: 1
  # initContainer config for traefik availability checks
  traefikCheck:
    # Maximum time to wait for traefik availability
    timeout_seconds: 60

  # Prefix for the username k8s identity authenticated through Dex
  oidcUsernamePrefix: "github:"
  # Prefix for the k8s groups authenticated through Dex
  oidcGroupPrefix: "github:"

  # Client ID for oauth2-proxy to authenticate with Dex (auto-generated if empty)
  oauth2ProxyClientId: "oauth2-proxy"
  # Client secret for oauth2-proxy to authenticate with Dex (auto-generated if empty)
  # Generate with 'openssl rand -hex 16'
  oauth2ProxyClientSecret: "15203aa672ded2f4bbc39182049ee0b9"

  # Client ID for kubernetes to authenticate with Dex (auto-generated if empty)
  kubernetesClientId: "kubectl-oidc"
  # Client secret for Kubernetes to authenticate with Dex
  # To set: generate with 'openssl rand -hex 16'
  # Leave empty to use Dex's 'public: true' option (recommended for kubectl oidc-login)
  kubernetesClientSecret: ""
  # Client localhost:PORT to set for redirect
  kubernetesClientRedirectPorts:
    - 8000
    - 18000
    - 9800
    
# Github OAuth configuration
github:
  # GitHub OAuth client ID (required)
  clientId: ""
  # GitHub OAuth client secret (required)
  clientSecret: ""
  # GitHub organizations to allow access
  orgs: []
    # - name: example-org-2
    #   teams:
    #     - team-1
    # GitHub oauth can support teamless org membership access
    # However dex cannot match it to a group, so do NOT use
    # - name: example-org

# RBAC to create
githubRbac:
  # whether to create RBAC resources at all
  create: true
  # whether to create organization/team-based role and role bindings
  createOrgsRole: true
  orgs: []
    # GitHub oauth can support teamless org membership access
    # However dex cannot match it to a group, so do NOT use
    # - name: example-org-2
    #   teams:
    #     - team-1
  createUsersRoles: false
  users: []
    # - username1

# OAuth2 Proxy configuration
oauth2Proxy:
  # Cookie secret for OAuth2 Proxy (will be auto-generated if not provided)
  cookieSecret: ""
  # initContainer config for dex availability checks
  dexCheck:
    # Maximum time to wait for Dex to be available in seconds
    timeout_seconds: 300
  # Skip authentication for certain paths (useful for WebSockets)
  skipAuthRegex: []

# Authmiddleware configuration
authmiddleware:
  # Whether to deploy the authmiddleware component
  enabled: true
  # Number of replicas
  replicas: 1
  # Authmiddleware image settings
  imagePullPolicy: Always
  repository: docker.io
  imageName: jupyter-k8s-auth
  imageTag: latest
  # Resource limits and requests
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 64Mi
  # JWT configuration
  # Required: must be provided as base64 encoded string (generate with: openssl rand -base64 32)
  jwtSigningKey: ""
  jwtIssuer: "jupyter-k8s-auth"
  jwtAudience: "workspace-users"
  jwtExpiration: "1h"
  jwtRefreshEnable: "true"
  jwtRefreshWindow: "15m"
  jwtRefreshHorizon: "12h"
  # Cookie configuration
  cookieName: "workspace_auth"
  cookieSecure: "true"
  cookiePath: "/"
  cookieMaxAge: "24h"
  cookieHttpOnly: "true"
  cookieSameSite: "lax"
  # Path configuration
  pathRegexPattern: "^(/workspaces/[^/]+/[^/]+)(?:/.*)?$"
  workspaceNamespacePathRegex: "^/workspaces/([^/]+)/[^/]+"
  workspaceNamePathRegex: "^/workspaces/[^/]+/([^/]+)"
  # CSRF configuration
  # Required: must be provided as base64 encoded string (generate with: openssl rand -base64 32)
  csrfAuthKey: ""
  csrfCookieName: "workspace_csrf"
  csrfCookieMaxAge: "1h"
  csrfCookieSecure: "true"
  # Server configuration
  readTimeout: "10s"
  writeTimeout: "10s"
  shutdownTimeout: "30s"