name: Base Helm

on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:

jobs:
  test-chart:
    name: Chart (Operator-Only)
    runs-on: ubuntu-latest
    steps:
      - name: Clone the code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Install the latest version of kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/latest/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind

      - name: Verify kind installation
        run: kind version

      - name: Create kind cluster
        run: kind create cluster

      - name: Prepare environment
        run: |
          go mod tidy
          make docker-build IMG=jupyter-k8s:v0.1.0 CONTAINER_TOOL=docker
          kind load docker-image jupyter-k8s:v0.1.0

      - name: Install Helm
        run: sudo snap install helm --classic

      - name: Verify Helm installation
        run: helm version

      - name: Install kubebuilder
        run: |
          # Install the correct version of kubebuilder (4.8.0) as specified in the PROJECT file
          mkdir -p /tmp/kubebuilder
          curl -L "https://github.com/kubernetes-sigs/kubebuilder/releases/download/v4.8.0/kubebuilder_$(go env GOOS)_$(go env GOARCH)" -o /tmp/kubebuilder/kubebuilder
          chmod +x /tmp/kubebuilder/kubebuilder
          sudo mv /tmp/kubebuilder/kubebuilder /usr/local/bin/
          rm -rf /tmp/kubebuilder
          kubebuilder version

      - name: Generate Helm Chart
        run: make helm-generate

      - name: Lint Helm Chart
        run: make helm-lint

      - name: Run Helm Tests
        run: make helm-test

      - name: Install cert-manager via Helm
        run: |
          helm repo add jetstack https://charts.jetstack.io
          helm repo update
          helm install cert-manager jetstack/cert-manager --namespace cert-manager --create-namespace --set installCRDs=true

      - name: Wait for cert-manager to be ready
        run: |
          kubectl wait --namespace cert-manager --for=condition=available --timeout=300s deployment/cert-manager
          kubectl wait --namespace cert-manager --for=condition=available --timeout=300s deployment/cert-manager-cainjector
          kubectl wait --namespace cert-manager --for=condition=available --timeout=300s deployment/cert-manager-webhook

# TODO: Uncomment if Prometheus is enabled
#      - name: Install Prometheus Operator CRDs
#        run: |
#          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
#          helm repo update
#          helm install prometheus-crds prometheus-community/prometheus-operator-crds
#
#      - name: Install Prometheus via Helm
#        run: |
#          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
#          helm repo update
#          helm install prometheus prometheus-community/prometheus --namespace monitoring --create-namespace
#
#      - name: Wait for Prometheus to be ready
#        run: |
#          kubectl wait --namespace monitoring --for=condition=available --timeout=300s deployment/prometheus-server

      - name: Install Helm chart for project
        run: |
          helm install my-release ./dist/chart --create-namespace --namespace jupyter-k8s-system

      - name: Check Helm release status
        run: |
          helm status my-release --namespace jupyter-k8s-system

# TODO: Uncomment if prometheus.enabled is set to true to confirm that the ServiceMonitor gets created
#      - name: Check Presence of ServiceMonitor
#        run: |
#          kubectl wait --namespace jupyter-k8s-system --for=jsonpath='{.kind}'=ServiceMonitor servicemonitor/jupyter-k8s-controller-manager-metrics-monitor
